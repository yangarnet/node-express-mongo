{"version":3,"sources":["../../src/middleware/config.js"],"names":["myLogger","req","res","next","middleWare","app","use","urlencoded","extended","json","static","console","log"],"mappings":";;;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA;AACA,IAAMA,WAAW,SAAXA,QAAW,CAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACjC;AACAA;AACH,CAHD;;AAMA,IAAMC,aAAa,SAAbA,UAAa,CAACC,GAAD,EAAS;;AAExB;AACAA,QAAIC,GAAJ,CAAQ,qBAAWC,UAAX,CAAsB,EAACC,UAAU,IAAX,EAAtB,CAAR;AACAH,QAAIC,GAAJ,CAAQ,qBAAWG,IAAX,EAAR;;AAEA;AACA;AACA;;AAEA;AACAJ,QAAIC,GAAJ,CAAQ,kBAAQI,MAAR,CAAe,QAAf,CAAR;AACA;AACAL,QAAIC,GAAJ,CAAQ,SAAR,EAAmB,kBAAQI,MAAR,CAAe,QAAf,CAAnB;;AAEA;AACAL,QAAIC,GAAJ,CAAQ,GAAR,EAAaN,QAAb;;AAEA;AACAK,QAAIC,GAAJ,CAAQ,QAAR,EAAkB,UAACL,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAClC;AACAA;AACH,KAHD;AAIA;AACAE,QAAIC,GAAJ,CAAQ,gBAAR,EAA0B,UAACL,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC1CQ,gBAAQC,GAAR,CAAY,gCAAZ;AACAT;AACH,KAHD;AAKH,CA7BD;;kBA+BeC,U","file":"config.js","sourcesContent":["\nimport express from 'express';\nimport moment from 'moment';\nimport bodyParser from 'body-parser';\n\n// how to use customised middleware\nconst myLogger = (req, res, next) => {\n    //console.log(`middleWare: request time: ${moment.unix(Date.now()/1000).format('DD-MM-YYYY HH:mm:ss')}`);\n    next();\n};\n\n\nconst middleWare = (app) => {\n\n    // setup body parser middleware\n    app.use(bodyParser.urlencoded({extended: true}));\n    app.use(bodyParser.json());\n\n    // get static resources from the plublic folder and display\n    // Express looks up the files relative to the static directory, \n    // so the name of the static directory is not part of the URL.\n\n    // access localhost:3000/img/sky.jpeg\n    app.use(express.static('public'));\n    // add virtual path, access  with localhost:3000/static/img/sky.jpeg\n    app.use('/static', express.static('public'));\n\n    // application level middleware\n    app.use('/', myLogger);\n\n    // response to any type of request to path /to-do\n    app.use('/to-do', (req, res, next) => {\n        //console.log('request to path /to-do');\n        next();\n    });\n    // response to any type of request to path /to-do/:todoId\n    app.use('/to-do/:todoId', (req, res, next) => {\n        console.log('request to path /to-do/:todoId');\n        next();\n    });\n\n};\n\nexport default middleWare;\n"]}