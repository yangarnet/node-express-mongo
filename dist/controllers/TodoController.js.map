{"version":3,"sources":["../../src/controllers/TodoController.js"],"names":["todoController","req","res","find","err","todos","Error","json","newTodo","body","save","then","todo","id","params","todoId","findById","result","findByIdAndUpdate","completed","findOneAndUpdate","_id","content","updateResult","findByIdAndRemove"],"mappings":";;;;;;;;AAAA;;;;;;;;AAEA;IACMA,c;AAEF,8BAAc;AAAA;AAAE;;;;gCAERC,G,EAAKC,G,EAAK;AACd,gCAAUC,IAAV,CAAe,EAAf,EAAmB,UAACC,GAAD,EAAMC,KAAN,EAAgB;AAC/B,oBAAID,GAAJ,EAAS;AACL,0BAAM,IAAIE,KAAJ,CAAUF,GAAV,CAAN;AACH,iBAFD,MAEO;AACHF,wBAAIK,IAAJ,CAASF,KAAT;AACH;AACJ,aAND;AAOH;;;gCAEOJ,G,EAAKC,G,EAAK;AACd;AACA,gBAAMM,UAAU,wBAAcP,IAAIQ,IAAlB,CAAhB;;AAEAD,oBAAQE,IAAR,GAAeC,IAAf,CAAoB,gBAAQ;AACxBT,oBAAIK,IAAJ,CAASK,IAAT;AACH,aAFD,EAEG,eAAO;AACN,sBAAM,IAAIN,KAAJ,CAAUF,GAAV,CAAN;AACH,aAJD;AAKH;;;oCAEWH,G,EAAKC,G,EAAK;AAClB;AACA,gBAAMW,KAAKZ,IAAIa,MAAJ,CAAWC,MAAtB;AACA,gCAAUC,QAAV,CAAmBH,EAAnB,EAAuB,UAACT,GAAD,EAAMa,MAAN,EAAiB;AACpC,oBAAIb,GAAJ,EAAS;AACL,0BAAM,IAAIE,KAAJ,CAAUF,GAAV,CAAN;AACH;AACDF,oBAAIK,IAAJ,CAASU,MAAT;AACH,aALD;AAMH;;;uCAEchB,G,EAAKC,G,EAAK;AACrB,gBAAMW,KAAKZ,IAAIa,MAAJ,CAAWC,MAAtB;;AAEA;AACA,gCAAUG,iBAAV,CAA4BL,EAA5B,EACI,EAAEM,WAAW,IAAb,EADJ,EACyB;AACrB,sBAACf,GAAD,EAAMa,MAAN,EAAiB;AACb,oBAAIb,GAAJ,EAAS;AACL,0BAAM,IAAIE,KAAJ,CAAUF,GAAV,CAAN;AACH;AACJ,aANL;;AAQA,gCAAUgB,gBAAV,CACI,EAAEC,KAAKpB,IAAIa,MAAJ,CAAWC,MAAlB,EADJ,EAEI,EAAEO,SAAS,yBAAX,EAFJ,EAE6C;AACzC,sBAAClB,GAAD,EAAMmB,YAAN,EAAuB;AACnB,oBAAInB,GAAJ,EAAS;AACL,0BAAM,IAAIE,KAAJ,CAAUF,GAAV,CAAN;AACH;AACDF,oBAAIK,IAAJ,CAASgB,YAAT;AACH,aARL;AASH;;;uCAEctB,G,EAAKC,G,EAAK;AACrB,gBAAMW,KAAKZ,IAAIa,MAAJ,CAAWC,MAAtB;;AAEA,gCAAUS,iBAAV,CAA4BX,EAA5B,EAAgC,UAACT,GAAD,EAAMa,MAAN,EAAiB;AAC7C,oBAAIb,GAAJ,EAAS;AACL,0BAAM,IAAIE,KAAJ,CAAUF,GAAV,CAAN;AACH;AACDF,oBAAIK,IAAJ,CAASU,MAAT;AACH,aALD;AAMH;;;;;;kBAGUjB,c","file":"TodoController.js","sourcesContent":["import todoModel from '../models/TodoModel';\n\n// all the db related work will be around todoModel .\nclass todoController {\n\n    constructor() {}\n\n    getTodo(req, res) {\n        todoModel.find({}, (err, todos) => {\n            if (err) {\n                throw new Error(err);\n            } else {\n                res.json(todos);\n            }\n        });\n    }\n\n    addTodo(req, res) {\n        // new a document, each document is an instance of the Model\n        const newTodo = new todoModel(req.body);\n\n        newTodo.save().then(todo => {\n            res.json(todo);\n        }, err => {\n            throw new Error(err);\n        });\n    }\n\n    getTodoById(req, res) {\n        // this todoId is the as the routes written\n        const id = req.params.todoId;\n        todoModel.findById(id, (err, result) => {\n            if (err) {\n                throw new Error(err);\n            }\n            res.json(result);\n        });\n    }\n\n    updateTodoById(req, res) {\n        const id = req.params.todoId;\n\n        // see the following two about how to get documents\n        todoModel.findByIdAndUpdate(id, \n            { completed: true }, // bit to update\n            (err, result) => {\n                if (err) {\n                    throw new Error(err);\n                }\n            });\n\n        todoModel.findOneAndUpdate(\n            { _id: req.params.todoId }, \n            { content: 'set by findOneAndUpdate' },  // bit to update\n            (err, updateResult) => {\n                if (err) {\n                    throw new Error(err);\n                }\n                res.json(updateResult)\n            });\n    }\n\n    deleteTodoById(req, res) {\n        const id = req.params.todoId;\n\n        todoModel.findByIdAndRemove(id, (err, result) => {\n            if (err) {\n                throw new Error(err);\n            }\n            res.json(result);\n        });\n    }\n}\n\nexport default todoController;\n"]}