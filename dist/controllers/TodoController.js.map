{"version":3,"sources":["../../src/controllers/TodoController.js"],"names":["todoController","req","res","find","err","todos","status","send","json","newTodo","body","save","then","todo","id","params","todoId","isValid","findById","findOne","_id","content","response","Error","findByIdAndUpdate","completed","result","findOneAndUpdate","updateResult","findByIdAndRemove","catch","e"],"mappings":"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","file":"TodoController.js","sourcesContent":["import todoModel from '../models/TodoModel';\nimport { ObjectID } from 'mongodb';\n\n// all the db related work will be around todoModel .\nclass todoController {\n\n    constructor() {}\n\n    getTodo(req, res) {\n        todoModel.find({}, (err, todos) => {\n            if (err) {\n                res.status(404).send(err);\n            } else {\n                res.json({todos});\n            }\n        });\n    }\n\n    addTodo(req, res) {\n        // new a document, each document is an instance of the Model\n        const newTodo = new todoModel(req.body);\n\n        newTodo.save().then(todo => {\n            res.json(todo);\n        }, err => {\n            res.status(400).send(err);\n        });\n    }\n\n    getTodoById(req, res) {\n        // this todoId is the as the routes written\n        const id = req.params.todoId;\n        if (ObjectID.isValid(id)) {\n            todoModel.findById(id).then(todo => {\n                if (!todo) {\n                    res.status(403).send();\n                }\n                // return an object is better\n                res.json({todo});\n            }, err => {\n                res.status(400).send(err);\n            });\n        } else {\n            res.status(404).send('ObjectID is invalid for query');\n        }\n    }\n\n    getTodoByName(req, res) {\n        const todo = req.params.todo;\n        todoModel.findOne({_id: '', content: todo})\n                 .then(response => {\n                     res.json(response);\n                 }, err => {\n                     throw new Error(err);\n                 });\n    }\n\n    updateTodoById(req, res) {\n        const id = req.params.todoId;\n\n        // see the following two about how to get documents\n        todoModel.findByIdAndUpdate(id, \n            { completed: true }, // bit to update\n            (err, result) => {\n                if (err) {\n                    throw new Error(err);\n                }\n            });\n\n        todoModel.findOneAndUpdate(\n            { _id: req.params.todoId }, \n            { content: 'set by findOneAndUpdate' },  // bit to update\n            (err, updateResult) => {\n                if (err) {\n                    throw new Error(err);\n                }\n                res.json(updateResult);\n            });\n    }\n\n    deleteTodoById(req, res) {\n        const id = req.params.todoId;\n        if (ObjectID.isValid(id)) {\n            todoModel.findByIdAndRemove(id)\n            .then(todo => {\n                if (!todo) {\n                    res.status(404).send();\n                }\n                res.send({todo});\n            }, err => {\n                res.status(400).send(err);\n            })\n            .catch(e => {\n                res.status(400).send(e);\n            });\n        }\n        else {\n            res.status(400).send();\n        }\n    }\n}\n\nexport default todoController;\n"]}