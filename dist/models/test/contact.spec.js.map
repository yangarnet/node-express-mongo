{"version":3,"sources":["../../../src/models/test/contact.spec.js"],"names":["should","describe","it","done","contact","lastName","email","validate","err","errors","firstName","to","exist","equal","company","not","message","be","null"],"mappings":";;AAAA;;;;AAEA;;;;AACA;;;;;;AAEA,IAAMA,SAAS,eAAKA,MAAL,EAAf;;AAEAC,SAAS,wBAAT,EAAmC,YAAM;AACrC;;AAEAC,OAAG,iDAAH,EAAsD,UAACC,IAAD,EAAU;AAC5D,YAAIC,UAAU,2BAAiB;AAC3BC,sBAAU,OADiB;AAE3BC,mBAAM;AAFqB,SAAjB,CAAd;;AAKAF,gBAAQG,QAAR,CAAiB,UAACC,GAAD,EAAS;AACtB,8BAAOA,IAAIC,MAAJ,CAAWC,SAAlB,EAA6BC,EAA7B,CAAgCC,KAAhC;AACA,yBAAOC,KAAP,CAAaL,IAAIC,MAAJ,CAAWC,SAAxB,EAAmC,wBAAnC;AACAP;AACH,SAJD;AAKH,KAXD;;AAaAD,OAAG,sDAAH,EAA2D,UAACC,IAAD,EAAU;AACjE,YAAIC,UAAU,2BAAiB;AAC3BM,uBAAW;AADgB,SAAjB,CAAd;;AAIAN,gBAAQG,QAAR,CAAiB,UAACC,GAAD,EAAS;AACtB,8BAAOA,IAAIC,MAAJ,CAAWJ,QAAlB,EAA4BM,EAA5B,CAA+BC,KAA/B;AACA,8BAAOJ,IAAIC,MAAJ,CAAWH,KAAlB,EAAyBK,EAAzB,CAA4BC,KAA5B;AACA,8BAAOJ,IAAIC,MAAJ,CAAWK,OAAlB,EAA2BC,GAA3B,CAA+BJ,EAA/B,CAAkCC,KAAlC;;AAEAJ,gBAAIC,MAAJ,CAAWH,KAAX,CAAiBU,OAAjB,CAAyBhB,MAAzB,CAAgCiB,EAAhC,CAAmCJ,KAAnC,CAAyC,0BAAzC;;AAEAV;AACH,SARD;AASH,KAdD;;AAgBAD,OAAG,4DAAH,EAAiE,UAACC,IAAD,EAAU;AACvE,YAAIC,UAAU,2BAAiB;AAC3BM,uBAAW,KADgB;AAE3BL,sBAAU,KAFiB;AAG3BC,mBAAO;AAHoB,SAAjB,CAAd;;AAMAF,gBAAQG,QAAR,CAAiB,UAACC,GAAD,EAAS;AACtB,8BAAOA,GAAP,EAAYG,EAAZ,CAAeM,EAAf,CAAkBC,IAAlB;;AAEAf;AACH,SAJD;AAOH,KAdD;;AAgBA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACH,CA/DD","file":"contact.spec.js","sourcesContent":["import { expect, assert } from 'chai';\nimport chai from 'chai';\nimport contactModel from '../ContactModel';\nimport sinon from 'sinon';\n\nconst should = chai.should();\n\ndescribe('validate contact model', () => {\n    'use strict';\n\n    it('should be invalid model if firstname is missing', (done) => {\n        let contact = new contactModel({\n            lastName: 'Kelly',\n            email:'12345@gmail.com'\n        });\n\n        contact.validate((err) => {\n            expect(err.errors.firstName).to.exist;\n            assert.equal(err.errors.firstName, 'Ok, Enter a first Name');\n            done();\n        });\n    });\n\n    it('should be invalid model if lastname/email is missing', (done) => {\n        let contact = new contactModel({\n            firstName: 'firstname'\n        });\n\n        contact.validate((err) => {\n            expect(err.errors.lastName).to.exist;\n            expect(err.errors.email).to.exist;\n            expect(err.errors.company).not.to.exist;\n            \n            err.errors.email.message.should.be.equal('OK, Enter a email addres');\n\n            done();\n        });\n    });\n\n    it('should be valid model if fullname and email presents, and ', (done) => {\n        let contact = new contactModel({\n            firstName: 'abc',\n            lastName: 'efg',\n            email: '123@gmail.com'\n        });\n\n        contact.validate((err) => {\n            expect(err).to.be.null;\n\n            done();\n        });\n\n        \n    });\n\n    // it('test model instance method: findByEmail()', sinon.test(function(){\n    \n    //     let contact = new contactModel({\n    //         firstName: 'abc',\n    //         lastName: 'efg',\n    //         email: '123@gmail.com'\n    //     });\n    //     // stub , do not do any db calls\n    //     this.stub(contactModel, 'findOne').yields(null,contact);\n        \n    //     contact.findByEmail(()=>{});\n        \n    //     sinon.assert.calledWith(contactModel.findByEmail, {email: contact.email});\n\n    // }));\n});"]}