{"version":3,"sources":["../../src/test/app.spec.js"],"names":["should","expect","assert","beforeEach","remove","then","done","describe","it","content","completed","post","send","res","body","to","be","a","end","err","find","todos","length","equal","have","property","toUpperCase","catch","e","timeout"],"mappings":";;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,SAAS,eAAKA,MAAL,EAAf;AACA,IAAMC,SAAS,eAAKA,MAApB;AACA,IAAMC,SAAS,eAAKA,MAApB;AACA;AACAC,WAAW,gBAAQ;AACf,wBAAUC,MAAV,GAAmBC,IAAnB,CAAwB;AAAA,eAAMC,MAAN;AAAA,KAAxB;AACH,CAFD;;AAIAC,SAAS,oBAAT,EAA+B,YAAM;;AAEjCC,OAAG,0BAAH,EAA+B,UAACF,IAAD,EAAU;AACrC,YAAMG,UAAU,+BAAhB;AACA,YAAMC,YAAY,IAAlB;;AAEA,gDACKC,IADL,CACU,QADV,EAEKC,IAFL,CAEU,EAACH,gBAAD,EAAUC,oBAAV,EAFV,EAGKT,MAHL,CAGY,GAHZ,EAIKA,MAJL,CAIY,eAAO;AACXA,mBAAOY,IAAIC,IAAJ,CAASL,OAAhB,EAAyBM,EAAzB,CAA4BC,EAA5B,CAA+BC,CAA/B,CAAiC,QAAjC;AACH,SANL,EAOKC,GAPL,CAOS,UAACC,GAAD,EAAMN,GAAN,EAAc;AACf,gBAAIM,GAAJ,EAAS;AACL,uBAAOb,KAAKa,GAAL,CAAP;AACH;AACD,gCAAUC,IAAV,GAAiBf,IAAjB,CAAsB,iBAAS;AAC3BJ,uBAAOoB,MAAMC,MAAb,EAAqBP,EAArB,CAAwBC,EAAxB,CAA2BO,KAA3B,CAAiC,CAAjC;AACAF,sBAAM,CAAN,EAASrB,MAAT,CAAgBwB,IAAhB,CAAqBC,QAArB,CAA8B,SAA9B;AACAxB,uBAAOoB,MAAM,CAAN,EAASZ,OAAhB,EAAyBM,EAAzB,CAA4BQ,KAA5B,CAAkCd,QAAQiB,WAAR,EAAlC;AACAzB,uBAAOoB,MAAM,CAAN,EAASX,SAAhB,EAA2BK,EAA3B,CAA8BC,EAA9B,CAAiCO,KAAjC,CAAuCb,SAAvC;AACAJ;AACH,aAND,EAMGqB,KANH,CAMS;AAAA,uBAAKrB,KAAKsB,CAAL,CAAL;AAAA,aANT;AAOH,SAlBL;AAmBH,KAvBD,EAuBGC,OAvBH,CAuBW,IAvBX;AAwBH,CA1BD","file":"app.spec.js","sourcesContent":["\nimport app from '../../app';\nimport chai from 'chai';\nimport request from 'supertest';\nimport todoModel from '../model/TodoModel';\n\nconst should = chai.should();\nconst expect = chai.expect;\nconst assert = chai.assert;\n// should be using sinon\nbeforeEach(done => {\n    todoModel.remove().then(() => done());\n});\n\ndescribe('POST: add new todo', () => {\n\n    it('should create a new todo', (done) => {\n        const content = 'learn writing test for nodejs';\n        const completed = true;\n\n        request(app)\n            .post('/to-do')\n            .send({content, completed})\n            .expect(200)\n            .expect(res => {\n                expect(res.body.content).to.be.a('string')\n            })\n            .end((err, res) => {\n                if (err) {\n                    return done(err);\n                }\n                todoModel.find().then(todos => {\n                    expect(todos.length).to.be.equal(1);\n                    todos[0].should.have.property('content');\n                    expect(todos[0].content).to.equal(content.toUpperCase())\n                    expect(todos[0].completed).to.be.equal(completed);\n                    done();\n                }).catch(e => done(e));\n            });\n    }).timeout(5000);\n});"]}