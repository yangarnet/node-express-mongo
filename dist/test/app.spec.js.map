{"version":3,"sources":["../../src/test/app.spec.js"],"names":["should","expect","assert","todos","_id","content","completed","beforeEach","remove","then","insertMany","done","describe","it","post","send","res","body","to","be","a","end","err","find","length","equal","have","property","toUpperCase","catch","e","timeout","eq","get","not","null","toHexString","response","todo"],"mappings":"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","file":"app.spec.js","sourcesContent":["\nimport app from '../../app';\nimport chai from 'chai';\nimport request from 'supertest';\nimport todoModel from '../models/TodoModel';\nimport sinon from 'sinon';\nimport { ObjectID } from 'mongodb';\n\nconst should = chai.should();\nconst expect = chai.expect;\nconst assert = chai.assert;\n\n// this is hitting the database, not good! \nconst todos = [\n    {\n        _id: new ObjectID(),\n        content: 'first todo',\n        completed: true\n    },\n    {\n        _id: new ObjectID(),\n        content: 'sencond todo',\n        completed: false\n    }\n];\n// insert two todos by default.\nbeforeEach(done => {\n    todoModel.remove()\n             .then(() => {\n                 return todoModel.insertMany(todos)\n                                 .then(() => done());\n            });\n});\n\ndescribe('test express app with todo controller', () => {\n    'use strict';\n\n    it('should create a new todo', (done) => {\n        const content = 'learn writing test for nodejs';\n        const completed = true;\n\n        // let todoModelMock = sinon.mock(todoModel);\n\n        // todoModelMock.expects('save').yields(null, { status: true });\n        // todoModelMock.expects('find').yields(null, { content, completed});\n        request(app)\n            .post('/to-do')\n            .send({content, completed})\n            .expect(200)\n            .expect(res => {\n                expect(res.body.content).to.be.a('string');\n            })\n            .end((err, res) => {\n                if (err) {\n                    return done(err);\n                }\n                // find the given todo\n                todoModel.find({content}).then(todos => {\n                    expect(todos.length).to.be.equal(1);\n                    todos[0].should.have.property('content');\n                    expect(todos[0].content).to.equal(content.toUpperCase());\n                    expect(todos[0].completed).to.be.equal(completed);\n                    done();\n                }).catch(e => done(e));\n            });\n    }).timeout(5000);\n\n    it('should NOT create a new todo with invalid data', (done) => {\n        const content = 'learn write express test';\n        request(app).post('/to-do')\n                    .send({content})\n                    .expect(400)\n                    .end((err, res) => {\n                        if (err) {\n                            return done(err);\n                        }\n                        todoModel.find()\n                                 .then(todos => {\n                                     expect(todos.length).to.be.eq(2);\n                                     done();\n                                 })\n                                 .catch(e=>done(e));\n                    });\n    });\n\n    it('should get ALL todos : get(\"/to-do\")', (done) => {\n        request(app).get('/to-do')\n                    .expect(200)\n                    .expect(res => {\n                        expect(res.body.todos).not.null;\n                        expect(res.body.todos.length).to.be.eq(2);\n                    }).end(done);\n    }).timeout(5000);\n\n    it('should get todo by ID', (done) => {\n        request(app).get(`/to-do/${todos[0]._id.toHexString()}`)\n                    .expect(200)\n                    .expect(response => {\n                        expect(response.body.todo).not.null;\n                        expect(response.body.todo).to.be.a('object');\n                        expect(response.body.todo.content).to.be.eq(todos[0].content);\n                    })\n                    .end(done);\n    });\n\n    it('should return 404 when todo not found by id', (done) => {\n        request(app).get(`/to-do/${(new ObjectID()).toHexString}`)\n                    .expect(404)\n                    .end(done);\n    });\n\n    it('should return 404 for non-object ids', (done) => {\n        request(app).get(`/to-do/asdfw45634563}`)\n        .expect(404)\n        .end(done);\n    });\n});"]}